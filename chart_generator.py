#!/usr/bin/env python3
"""
GERADOR DE GR√ÅFICOS V6
Sistema de visualiza√ß√£o dos resultados reais
"""

import json
import csv
import matplotlib.pyplot as plt
import matplotlib.patches as patches
import seaborn as sns
import numpy as np
import pandas as pd
from typing import Dict, List, Any
from pathlib import Path

from config import get_config


class ChartGenerator:
    """Gerador de gr√°ficos comparativos"""
    
    def __init__(self):
        self.config = get_config()
        self.results_file = self.config.RESULTS_DIR / "all_results.csv"
        self.data = None
        self._load_data()
        
        # Configurar estilo
        plt.style.use('default')
        try:
            plt.style.use('seaborn-v0_8')
        except OSError:
            try:
                plt.style.use('seaborn')
            except OSError:
                pass  # Usar style padr√£o
        sns.set_palette("husl")
    
    def _load_data(self):
        """Carregar dados dos resultados"""
        try:
            if self.results_file.exists():
                self.data = pd.read_csv(self.results_file)
                # Filtrar apenas sucessos
                self.data = self.data[self.data['success'] == True]
                print(f"üìä Carregados {len(self.data)} resultados para gr√°ficos")
            else:
                print("‚ö†Ô∏è  Arquivo de resultados n√£o encontrado")
                
        except Exception as e:
            print(f"‚ùå Erro carregando dados: {e}")
            self.data = None
    
    def generate_all_charts(self) -> bool:
        """Gerar todos os gr√°ficos do sistema"""
        print("üìà GERANDO TODOS OS GR√ÅFICOS")
        
        if self.data is None or self.data.empty:
            print("‚ö†Ô∏è  Nenhum dado dispon√≠vel para gr√°ficos")
            return False
        
        try:
            # Gerar gr√°fico principal
            if not self.generate_complete_comparison_chart():
                print("‚ö†Ô∏è  Falha no gr√°fico principal")
                return False
            
            # Gerar gr√°ficos por linguagem
            for language in self.config.LANGUAGES:
                if not self.generate_language_specific_charts(language):
                    print(f"‚ö†Ô∏è  Falha nos gr√°ficos de {language}")
            
            # Gerar gr√°ficos de an√°lise detalhada
            if not self.generate_detailed_analysis_charts():
                print("‚ö†Ô∏è  Falha nos gr√°ficos de an√°lise detalhada")
                return False
            
            print("‚úÖ Todos os gr√°ficos gerados com sucesso")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro na gera√ß√£o de gr√°ficos: {e}")
            return False
    
    def generate_complete_comparison_chart(self) -> bool:
        """Gerar gr√°fico de compara√ß√£o completo principal"""
        print("üìà Gerando gr√°fico de compara√ß√£o completo...")
        
        if self.data is None or len(self.data) == 0:
            print("‚ùå Nenhum dado dispon√≠vel para gr√°ficos")
            return False
        
        try:
            # Criar figura com m√∫ltiplos subplots
            fig, axes = plt.subplots(2, 2, figsize=(20, 16))
            fig.suptitle('COMPARA√á√ÉO COMPLETA DE PERFORMANCE - C vs C++', 
                        fontsize=20, fontweight='bold')
            
            # Subplot 1: Lat√™ncia por configura√ß√£o
            self._plot_latency_comparison(axes[0, 0])
            
            # Subplot 2: Throughput por configura√ß√£o
            self._plot_throughput_comparison(axes[0, 1])
            
            # Subplot 3: Escalabilidade (servidores vs performance)
            self._plot_scalability_analysis(axes[1, 0])
            
            # Subplot 4: Distribui√ß√£o de performance
            self._plot_performance_distribution(axes[1, 1])
            
            # Ajustar layout
            plt.tight_layout()
            plt.subplots_adjust(top=0.93)
            
            # Salvar gr√°fico
            chart_file = self.config.GRAPHICS_DIR / "complete_comparison.png"
            plt.savefig(chart_file, dpi=300, bbox_inches='tight')
            plt.close()
            
            print(f"‚úÖ Gr√°fico principal salvo em {chart_file}")
            return True
            
        except Exception as e:
            print(f"‚ùå Erro gerando gr√°fico: {e}")
            return False
    
    def _plot_latency_comparison(self, ax):
        """Plotar compara√ß√£o de lat√™ncia"""
        try:
            # Agrupar por configura√ß√£o e linguagem
            grouped = self.data.groupby(['language', 'num_servers', 'num_clients'])['latency_avg'].mean().unstack(level=0)
            
            # Criar gr√°fico de barras
            grouped.plot(kind='bar', ax=ax, width=0.8)
            ax.set_title('Lat√™ncia M√©dia por Configura√ß√£o', fontsize=14, fontweight='bold')
            ax.set_xlabel('Configura√ß√£o (Servidores, Clientes)', fontsize=12)
            ax.set_ylabel('Lat√™ncia M√©dia (s)', fontsize=12)
            ax.legend(title='Linguagem', title_fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # Rotacionar labels
            ax.tick_params(axis='x', rotation=45)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no gr√°fico de lat√™ncia: {e}")
    
    def _plot_throughput_comparison(self, ax):
        """Plotar compara√ß√£o de throughput"""
        try:
            # Agrupar por configura√ß√£o e linguagem
            grouped = self.data.groupby(['language', 'num_servers', 'num_clients'])['throughput'].mean().unstack(level=0)
            
            # Criar gr√°fico de barras
            grouped.plot(kind='bar', ax=ax, width=0.8)
            ax.set_title('Throughput M√©dio por Configura√ß√£o', fontsize=14, fontweight='bold')
            ax.set_xlabel('Configura√ß√£o (Servidores, Clientes)', fontsize=12)
            ax.set_ylabel('Throughput (req/s)', fontsize=12)
            ax.legend(title='Linguagem', title_fontsize=12)
            ax.grid(True, alpha=0.3)
            
            # Rotacionar labels
            ax.tick_params(axis='x', rotation=45)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no gr√°fico de throughput: {e}")
    
    def _plot_scalability_analysis(self, ax):
        """Plotar an√°lise de escalabilidade"""
        try:
            # An√°lise de escalabilidade por n√∫mero de servidores
            scalability_data = self.data.groupby(['language', 'num_servers'])['throughput'].mean().unstack(level=0)
            
            # Criar gr√°fico de linha
            scalability_data.plot(kind='line', ax=ax, marker='o', linewidth=2, markersize=8)
            ax.set_title('Escalabilidade - Throughput vs N√∫mero de Servidores', fontsize=14, fontweight='bold')
            ax.set_xlabel('N√∫mero de Servidores', fontsize=12)
            ax.set_ylabel('Throughput M√©dio (req/s)', fontsize=12)
            ax.legend(title='Linguagem', title_fontsize=12)
            ax.grid(True, alpha=0.3)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no gr√°fico de escalabilidade: {e}")
    
    def _plot_performance_distribution(self, ax):
        """Plotar distribui√ß√£o de performance"""
        try:
            # Criar boxplot para comparar distribui√ß√µes
            data_for_box = []
            labels = []
            
            for lang in self.config.LANGUAGES:
                lang_data = self.data[self.data['language'] == lang]
                if len(lang_data) > 0:
                    data_for_box.append(lang_data['latency_avg'])
                    labels.append(lang.upper())
            
            if data_for_box:
                ax.boxplot(data_for_box, labels=labels)
                ax.set_title('Distribui√ß√£o de Lat√™ncia por Linguagem', fontsize=14, fontweight='bold')
                ax.set_ylabel('Lat√™ncia (s)', fontsize=12)
                ax.grid(True, alpha=0.3)
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no gr√°fico de distribui√ß√£o: {e}")
    
    def generate_detailed_analysis_charts(self) -> bool:
        """Gerar gr√°ficos de an√°lise detalhada"""
        print("üìä Gerando gr√°ficos de an√°lise detalhada...")
        
        if self.data is None or len(self.data) == 0:
            print("‚ùå Nenhum dado dispon√≠vel para an√°lise detalhada")
            return False
        
        try:
            # Gr√°fico de correla√ß√£o
            self._generate_correlation_chart()
            
            # Gr√°fico de heatmap de performance
            self._generate_performance_heatmap()
            
            # Gr√°fico de tend√™ncias
            self._generate_trends_chart()
            
            return True
            
        except Exception as e:
            print(f"‚ùå Erro gerando an√°lise detalhada: {e}")
            return False
    
    def _generate_correlation_chart(self):
        """Gerar gr√°fico de correla√ß√£o"""
        try:
            # Selecionar colunas num√©ricas
            numeric_cols = ['num_servers', 'num_clients', 'messages_per_client', 
                           'latency_avg', 'throughput', 'duration']
            
            correlation_data = self.data[numeric_cols].corr()
            
            # Criar heatmap
            plt.figure(figsize=(10, 8))
            sns.heatmap(correlation_data, annot=True, cmap='coolwarm', center=0)
            plt.title('Matriz de Correla√ß√£o das M√©tricas', fontsize=16, fontweight='bold')
            
            # Salvar
            chart_file = self.config.GRAPHICS_DIR / "correlation_analysis.png"
            plt.savefig(chart_file, dpi=300, bbox_inches='tight')
            plt.close()
            
            print(f"‚úÖ Gr√°fico de correla√ß√£o salvo em {chart_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no gr√°fico de correla√ß√£o: {e}")
    
    def _generate_performance_heatmap(self):
        """Gerar heatmap de performance"""
        try:
            # Criar pivot table para heatmap
            pivot_data = self.data.pivot_table(
                values='latency_avg',
                index='num_servers',
                columns='num_clients',
                aggfunc='mean'
            )
            
            # Criar heatmap para cada linguagem
            for lang in self.config.LANGUAGES:
                lang_data = self.data[self.data['language'] == lang]
                
                if len(lang_data) > 0:
                    pivot_lang = lang_data.pivot_table(
                        values='latency_avg',
                        index='num_servers',
                        columns='num_clients',
                        aggfunc='mean'
                    )
                    
                    plt.figure(figsize=(10, 6))
                    sns.heatmap(pivot_lang, annot=True, cmap='YlOrRd', fmt='.3f')
                    plt.title(f'Heatmap de Lat√™ncia - {lang.upper()}', fontsize=16, fontweight='bold')
                    plt.xlabel('N√∫mero de Clientes', fontsize=12)
                    plt.ylabel('N√∫mero de Servidores', fontsize=12)
                    
                    # Salvar
                    chart_file = self.config.GRAPHICS_DIR / f"heatmap_{lang}.png"
                    plt.savefig(chart_file, dpi=300, bbox_inches='tight')
                    plt.close()
                    
                    print(f"‚úÖ Heatmap {lang} salvo em {chart_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no heatmap: {e}")
    
    def _generate_trends_chart(self):
        """Gerar gr√°fico de tend√™ncias"""
        try:
            # An√°lise de tend√™ncias por n√∫mero de mensagens
            fig, (ax1, ax2) = plt.subplots(1, 2, figsize=(16, 6))
            
            # Tend√™ncia de lat√™ncia
            for lang in self.config.LANGUAGES:
                lang_data = self.data[self.data['language'] == lang]
                if len(lang_data) > 0:
                    trend_data = lang_data.groupby('messages_per_client')['latency_avg'].mean()
                    ax1.plot(trend_data.index, trend_data.values, marker='o', 
                            label=lang.upper(), linewidth=2)
            
            ax1.set_title('Tend√™ncia de Lat√™ncia vs Mensagens', fontsize=14, fontweight='bold')
            ax1.set_xlabel('Mensagens por Cliente', fontsize=12)
            ax1.set_ylabel('Lat√™ncia M√©dia (s)', fontsize=12)
            ax1.legend()
            ax1.grid(True, alpha=0.3)
            
            # Tend√™ncia de throughput
            for lang in self.config.LANGUAGES:
                lang_data = self.data[self.data['language'] == lang]
                if len(lang_data) > 0:
                    trend_data = lang_data.groupby('messages_per_client')['throughput'].mean()
                    ax2.plot(trend_data.index, trend_data.values, marker='o', 
                            label=lang.upper(), linewidth=2)
            
            ax2.set_title('Tend√™ncia de Throughput vs Mensagens', fontsize=14, fontweight='bold')
            ax2.set_xlabel('Mensagens por Cliente', fontsize=12)
            ax2.set_ylabel('Throughput M√©dio (req/s)', fontsize=12)
            ax2.legend()
            ax2.grid(True, alpha=0.3)
            
            plt.tight_layout()
            
            # Salvar
            chart_file = self.config.GRAPHICS_DIR / "trends_analysis.png"
            plt.savefig(chart_file, dpi=300, bbox_inches='tight')
            plt.close()
            
            print(f"‚úÖ Gr√°fico de tend√™ncias salvo em {chart_file}")
            
        except Exception as e:
            print(f"‚ö†Ô∏è  Erro no gr√°fico de tend√™ncias: {e}")


def get_chart_generator() -> ChartGenerator:
    """Obter gerador de gr√°ficos"""
    return ChartGenerator()
